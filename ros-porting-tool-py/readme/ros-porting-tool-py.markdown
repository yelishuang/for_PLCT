# Ros-Porting-Tool-PY

## 功能介绍
对于以往ros-porting-tool工具分析，以及相关流程调用。基于python标准库和部分Linux自带库构建一个简易，更全面，更稳定的打包工具（流程仅到产生spec文件为止）。

## 相关模块介绍

### 初始化模块
将许多过程中惠用到的参数，路径等通过WorkspaceManager这个类定义，构建，维护。再辅助judge_init函数确认是否完全构建。易于流程贯通，也易于后续调用。

### CSV模块
该模块含有read，add_header，write，replace_row，delete_row，write_row，read_all方法，由于任务流程中含有很多读写csv文件的场景，这个类整合了所有可能的读写逻辑。基于函数名就可以很好的了解对应方法的作用。以下会进行简单介绍。
read：按列读取csv文件，输入为一个集合，输出为字典。输入的集合内容为列号，输出的字典键为列的表头，值为列表，为这一列的所有数据。
add_header：写csv文件表头，以及存在数据会判断后不再重复书写。
write：按列写入数据，输入为字典。字典的键为对应列的表头，会进行判断表头是否存在，也会对多列写入进行相应处理，保证写入操作稳定。无输出。
replace_row，delete_row：替换行与删除行，匹配逻辑的按照行的第一个元素匹配，会将csv文件全部读入，再从写后输出到文件。内存开销相对较大。输入是字符串，基于任务流程输入是包名。
write_row：按行写入。会先进行匹配，如果存在就会用新数据合并原行的所有数据再次写入，如果不存在就会在列表尾添加一行，
read_all：读出表的所有数据，二维列表输出，区别于read，read是按列读出，本方法为按行读出。输出形式也不一样，read输出为字典，本方法输出为二维列表。

### PortManager
该模块逻辑较多整体逻辑较为繁琐，尤其是分析包依赖，基于模板spec文件生成spec文件，具体流程逻辑后续再进行补充。现按照打包过程中的控制台输出分为三个阶段进行介绍。

#### 下载流程
本流程先基于distribution.yaml文件分析出每一个ros包的基本信息，然后基于这些基本信息，合成packages.ros.org/ros2/ubuntu/pool/main/r/ros-humble*的访问链接，访问后用正则表达式等方式获取源码压缩包下载链接，然后进行下载。过程中使用多线程技术提供了分析与下载速率。增加了重试机制，提高了下载的稳定性。其中还会对无法下载，无法访问的网站输出控制台，输出日志。方便了解具体情况。控制台输出均为颜色输出。醒目提醒，方便直接定位错误位置。同撒会把分析得到的基本信息均写入info.csv这个文件中。方便后续取用。

#### 解压分析流程
对于上一步下载的压缩包解压，然后对源码包内容分析，会分析package.xml文件，会统计非/test目录的c，cpp文件数量，会检查是否含有CmakeList.txt文件。该流程也会进行多线程优化。

#### 产生spec文件
基于与ros-porting-tool相同的规则，产生keyword_value_mapping，这是一个字典，由于模板spec文件基于关键字替换，这个字典就是spec文件中的所有关键字，以及相应关键字按照各种逻辑应该替换为的文本。这一步会有大量的读写csv文件操作。和相应的文本修改操作。当参数spec文件后，会把源码和补丁，补丁包复制到指定目录下。完成全部任务流程。

## 源码文件目录介绍
```
ProjectRoot
├── directory_structure.txt      // 项目目录结构文件
├── MANIFEST.in                  // 包资源清单文件
├── PKG-INFO                     // 包的元数据文件
├── setup.cfg                    // 安装配置文件
├── setup.py                     // 安装脚本
│
├── ros_porting_tool_py          // 主项目包目录
│   ├── cmake.spec               // CMake 模板文件
│   ├── distribution.yaml        // 配置文件
│   ├── main.py                  // 主程序入口
│   ├── python.spec              // Python 模板文件
│   ├── source.json              // 配置文件
│   └── __init__.py              // 包初始化文件
│
└── ros_porting_tool_py.egg-info // Python 包的元数据目录
    ├── dependency_links.txt     // 依赖链接文件
    ├── entry_points.txt         // 入口点配置文件
    ├── PKG-INFO                 // 包的元数据文件
    ├── requires.txt             // 依赖项列表
    ├── SOURCES.txt              // 源文件列表
```

## 工作空间目录
```
ProjectRoot
├── analyse.csv                 // 分析结果文件
├── fix.csv                     // 修复信息文件
├── info.csv                    // 项目信息文件
├── ros_port_tool.log           // 工具日志文件
│
├── download                    // 下载文件夹
├── fix                         // 修复文件夹
├── repo                        // 结果文件夹
└── src                         // 源代码文件夹
```

## 安装方法
可以在Windows的power shell或者Linux控制台下输入，输入前保证该文件和命令行运行于同一目录即可。
```
pip install ./ros_porting_tool_py-0.1.0-py3-none-any.whl
```

## 依赖项
```
"certifi>=2025.1.31",
"charset-normalizer>=3.4.1",
"idna>=3.10",
"PyYAML>=6.0.2",
"requests>=2.32.3",
"urllib3>=2.3.0",
```
网络通信：requests 和 urllib3 是核心的 HTTP 客户端库，用于处理网络请求。  
安全性：certifi 和 idna 提供 SSL/TLS 验证和国际化域名支持。  
数据处理：charset-normalizer 用于字符编码的检测和标准化，PyYAML 用于处理 YAML 数据。  
其中requests 和 urllib3是Linux自带python库，如果Linux版本太低可能会导致达不到依赖项版本要求，建议使用sudo运行，或处于管理员权限下运行，这样会更新自带依赖到最新版本。PyYAML是一个十分通用的分析yaml文件的依赖。  

## 运行
脚本目前含有两个参数‘--init’，‘-thread’，--init无法输入附加值，仅用于在当前目录初始化工作目录。-thread可以输入额外参数-- 1-10。用于修改线程数，基于电脑性能设置。  
脚本运行流程是：  
1. ros-porting-tool-py --init
2. 把相应的修复文件复制到./workspace/fix目录下
3. ros-porting-tool-py -thread 10

## Linux运行流程截图

**工具安装**  
![alt text](./截图%202025-03-30%2015-12-04.png)  
  
**初始化工作目录**  
![alt text](./截图%202025-03-30%2015-12-38.png)  
    
**工作目录格式**  
![alt text](./截图%202025-03-30%2015-12-55.png)  

**获取并下载源码**  
![alt text](./截图%202025-03-30%2015-19-49.png)  
  
**解压缩并初步分析**  
![alt text](./截图%202025-03-30%2015-20-26.png)   

**复制修复文件到fix下**  
![alt text](./截图%202025-03-30%2015-14-02.png)  
  
**产生spec文件**  
![alt text](./截图%202025-03-30%2015-20-47.png)   


## Windows运行流程截图  
  
**安装初始化工作目录**  
![alt text](./图片1.png)   
    
**获取并下载源码**      
![alt text](./图片2.png)  
  
**解压缩并初步分析**  
![alt text](./图片3.png)  

**产生spec文件**  
![alt text](./图片4.png)

**包信息csv文件**  
![alt text](./图片7.png)   

**包依赖csv文件**  
![alt text](./图片5.png)   
  
**包修复csv文件**  
![alt text](./图片6.png) 

## 总结分析
目前ros-porting-tool-py因为修改了软件源已经可以对1800+包产生spec文件，相比原本拓展了约个800包。修改了原打包工具把相应逻辑均集中在一个工具中，完善了下载逻辑，增加重试机制，基本上避免了因为网络问题需要多次执行下载脚本的问题。而且添加线程操作，极大的优化了时间效率，由原本的约80+分钟的全任务流程时间优化到目前的不到五分钟（还是在额外拓展800包的情况下）。不仅如此，同时优化的还有原本的写入逻辑，，原本会有大量的文件io操作，约生成9000个中间文件记录各种依赖关系等，现全部优化到csv文件中，用CSV对应的类统一管理，提高稳定性的同时带来性能提升。而且同时对于修复项可以直接在fix.csv文件中进行修改.无需再创建相应的依赖文件进行分析.也方便开发者进行使用.同时控制台输出也由原本的白色输出改为彩色输出,面对多包构建,可以快速定位错误问题所在.但是目前还未实现基于参数的单包构建逻辑,还有就是日志输出文件不完整,对于下载阶段的日志文件完整,对于依赖构建到产生spec文件的日志文件缺失,还需补充.